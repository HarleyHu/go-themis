// Code generated
// This file is a generated binding and any manual changes will be lost.

package dpos

import (
	"math/big"
	"strings"

	"github.com/themis-network/go-themis/accounts/abi/bind"
	ethereum "github.com/themis-network/go-themis"
	"github.com/themis-network/go-themis/accounts/abi"
	"github.com/themis-network/go-themis/common"
	"github.com/themis-network/go-themis/core/types"
	"github.com/themis-network/go-themis/event"
)

// DposABI is the input ABI used to generate the binding from.
const DposABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"proxyVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"proxyUnvote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"destructSelf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"systemStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userUnvote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proxy\",\"type\":\"address\"},{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"userVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initOutTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVoteInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"producers\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"staked\",\"type\":\"uint256\"}],\"name\":\"LogUserVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"producers\",\"type\":\"address[]\"}],\"name\":\"LogProxyVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"unvoteTime\",\"type\":\"uint256\"}],\"name\":\"LogUserUnvote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"unvoteTime\",\"type\":\"uint256\"}],\"name\":\"LogProxyUnvote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawStake\",\"type\":\"event\"}]"

// Dpos is an auto generated Go binding around an Ethereum contract.
type Dpos struct {
	DposCaller     // Read-only binding to the contract
	DposTransactor // Write-only binding to the contract
	DposFilterer   // Log filterer for contract events
}

// DposCaller is an auto generated read-only Go binding around an Ethereum contract.
type DposCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DposTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DposTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DposFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DposFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DposSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DposSession struct {
	Contract     *Dpos             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DposCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DposCallerSession struct {
	Contract *DposCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DposTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DposTransactorSession struct {
	Contract     *DposTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DposRaw is an auto generated low-level Go binding around an Ethereum contract.
type DposRaw struct {
	Contract *Dpos // Generic contract binding to access the raw methods on
}

// DposCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DposCallerRaw struct {
	Contract *DposCaller // Generic read-only contract binding to access the raw methods on
}

// DposTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DposTransactorRaw struct {
	Contract *DposTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDpos creates a new instance of Dpos, bound to a specific deployed contract.
func NewDpos(address common.Address, backend bind.ContractBackend) (*Dpos, error) {
	contract, err := bindDpos(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Dpos{DposCaller: DposCaller{contract: contract}, DposTransactor: DposTransactor{contract: contract}, DposFilterer: DposFilterer{contract: contract}}, nil
}

// NewDposCaller creates a new read-only instance of Dpos, bound to a specific deployed contract.
func NewDposCaller(address common.Address, caller bind.ContractCaller) (*DposCaller, error) {
	contract, err := bindDpos(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DposCaller{contract: contract}, nil
}

// NewDposTransactor creates a new write-only instance of Dpos, bound to a specific deployed contract.
func NewDposTransactor(address common.Address, transactor bind.ContractTransactor) (*DposTransactor, error) {
	contract, err := bindDpos(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DposTransactor{contract: contract}, nil
}

// NewDposFilterer creates a new log filterer instance of Dpos, bound to a specific deployed contract.
func NewDposFilterer(address common.Address, filterer bind.ContractFilterer) (*DposFilterer, error) {
	contract, err := bindDpos(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DposFilterer{contract: contract}, nil
}

// bindDpos binds a generic wrapper to an already deployed contract.
func bindDpos(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DposABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Dpos *DposRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Dpos.Contract.DposCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Dpos *DposRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Dpos.Contract.DposTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Dpos *DposRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Dpos.Contract.DposTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Dpos *DposCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Dpos.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Dpos *DposTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Dpos.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Dpos *DposTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Dpos.Contract.contract.Transact(opts, method, params...)
}

// GetVoteInfo is a free data retrieval call binding the contract method 0xdc1e30da.
//
// Solidity: function getVoteInfo(voter address) constant returns(address, address[], uint256, uint256)
func (_Dpos *DposCaller) GetVoteInfo(opts *bind.CallOpts, voter common.Address) (common.Address, []common.Address, *big.Int, *big.Int, error) {
	var (
		ret0 = new(common.Address)
		ret1 = new([]common.Address)
		ret2 = new(*big.Int)
		ret3 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Dpos.contract.Call(opts, out, "getVoteInfo", voter)
	return *ret0, *ret1, *ret2, *ret3, err
}

// GetVoteInfo is a free data retrieval call binding the contract method 0xdc1e30da.
//
// Solidity: function getVoteInfo(voter address) constant returns(address, address[], uint256, uint256)
func (_Dpos *DposSession) GetVoteInfo(voter common.Address) (common.Address, []common.Address, *big.Int, *big.Int, error) {
	return _Dpos.Contract.GetVoteInfo(&_Dpos.CallOpts, voter)
}

// GetVoteInfo is a free data retrieval call binding the contract method 0xdc1e30da.
//
// Solidity: function getVoteInfo(voter address) constant returns(address, address[], uint256, uint256)
func (_Dpos *DposCallerSession) GetVoteInfo(voter common.Address) (common.Address, []common.Address, *big.Int, *big.Int, error) {
	return _Dpos.Contract.GetVoteInfo(&_Dpos.CallOpts, voter)
}

// InitOutTime is a free data retrieval call binding the contract method 0xc792d359.
//
// Solidity: function initOutTime() constant returns(uint256)
func (_Dpos *DposCaller) InitOutTime(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Dpos.contract.Call(opts, out, "initOutTime")
	return *ret0, err
}

// InitOutTime is a free data retrieval call binding the contract method 0xc792d359.
//
// Solidity: function initOutTime() constant returns(uint256)
func (_Dpos *DposSession) InitOutTime() (*big.Int, error) {
	return _Dpos.Contract.InitOutTime(&_Dpos.CallOpts)
}

// InitOutTime is a free data retrieval call binding the contract method 0xc792d359.
//
// Solidity: function initOutTime() constant returns(uint256)
func (_Dpos *DposCallerSession) InitOutTime() (*big.Int, error) {
	return _Dpos.Contract.InitOutTime(&_Dpos.CallOpts)
}

// SystemStorage is a free data retrieval call binding the contract method 0xab91ae80.
//
// Solidity: function systemStorage() constant returns(address)
func (_Dpos *DposCaller) SystemStorage(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Dpos.contract.Call(opts, out, "systemStorage")
	return *ret0, err
}

// SystemStorage is a free data retrieval call binding the contract method 0xab91ae80.
//
// Solidity: function systemStorage() constant returns(address)
func (_Dpos *DposSession) SystemStorage() (common.Address, error) {
	return _Dpos.Contract.SystemStorage(&_Dpos.CallOpts)
}

// SystemStorage is a free data retrieval call binding the contract method 0xab91ae80.
//
// Solidity: function systemStorage() constant returns(address)
func (_Dpos *DposCallerSession) SystemStorage() (common.Address, error) {
	return _Dpos.Contract.SystemStorage(&_Dpos.CallOpts)
}

// DestructSelf is a paid mutator transaction binding the contract method 0x9be6d404.
//
// Solidity: function destructSelf(newContract address) returns(bool)
func (_Dpos *DposTransactor) DestructSelf(opts *bind.TransactOpts, newContract common.Address) (*types.Transaction, error) {
	return _Dpos.contract.Transact(opts, "destructSelf", newContract)
}

// DestructSelf is a paid mutator transaction binding the contract method 0x9be6d404.
//
// Solidity: function destructSelf(newContract address) returns(bool)
func (_Dpos *DposSession) DestructSelf(newContract common.Address) (*types.Transaction, error) {
	return _Dpos.Contract.DestructSelf(&_Dpos.TransactOpts, newContract)
}

// DestructSelf is a paid mutator transaction binding the contract method 0x9be6d404.
//
// Solidity: function destructSelf(newContract address) returns(bool)
func (_Dpos *DposTransactorSession) DestructSelf(newContract common.Address) (*types.Transaction, error) {
	return _Dpos.Contract.DestructSelf(&_Dpos.TransactOpts, newContract)
}

// ProxyUnvote is a paid mutator transaction binding the contract method 0x5b41bc7d.
//
// Solidity: function proxyUnvote() returns(bool)
func (_Dpos *DposTransactor) ProxyUnvote(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Dpos.contract.Transact(opts, "proxyUnvote")
}

// ProxyUnvote is a paid mutator transaction binding the contract method 0x5b41bc7d.
//
// Solidity: function proxyUnvote() returns(bool)
func (_Dpos *DposSession) ProxyUnvote() (*types.Transaction, error) {
	return _Dpos.Contract.ProxyUnvote(&_Dpos.TransactOpts)
}

// ProxyUnvote is a paid mutator transaction binding the contract method 0x5b41bc7d.
//
// Solidity: function proxyUnvote() returns(bool)
func (_Dpos *DposTransactorSession) ProxyUnvote() (*types.Transaction, error) {
	return _Dpos.Contract.ProxyUnvote(&_Dpos.TransactOpts)
}

// ProxyVote is a paid mutator transaction binding the contract method 0x545f4a71.
//
// Solidity: function proxyVote(accounts address[]) returns(bool)
func (_Dpos *DposTransactor) ProxyVote(opts *bind.TransactOpts, accounts []common.Address) (*types.Transaction, error) {
	return _Dpos.contract.Transact(opts, "proxyVote", accounts)
}

// ProxyVote is a paid mutator transaction binding the contract method 0x545f4a71.
//
// Solidity: function proxyVote(accounts address[]) returns(bool)
func (_Dpos *DposSession) ProxyVote(accounts []common.Address) (*types.Transaction, error) {
	return _Dpos.Contract.ProxyVote(&_Dpos.TransactOpts, accounts)
}

// ProxyVote is a paid mutator transaction binding the contract method 0x545f4a71.
//
// Solidity: function proxyVote(accounts address[]) returns(bool)
func (_Dpos *DposTransactorSession) ProxyVote(accounts []common.Address) (*types.Transaction, error) {
	return _Dpos.Contract.ProxyVote(&_Dpos.TransactOpts, accounts)
}

// UserUnvote is a paid mutator transaction binding the contract method 0xae2e6f49.
//
// Solidity: function userUnvote() returns(bool)
func (_Dpos *DposTransactor) UserUnvote(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Dpos.contract.Transact(opts, "userUnvote")
}

// UserUnvote is a paid mutator transaction binding the contract method 0xae2e6f49.
//
// Solidity: function userUnvote() returns(bool)
func (_Dpos *DposSession) UserUnvote() (*types.Transaction, error) {
	return _Dpos.Contract.UserUnvote(&_Dpos.TransactOpts)
}

// UserUnvote is a paid mutator transaction binding the contract method 0xae2e6f49.
//
// Solidity: function userUnvote() returns(bool)
func (_Dpos *DposTransactorSession) UserUnvote() (*types.Transaction, error) {
	return _Dpos.Contract.UserUnvote(&_Dpos.TransactOpts)
}

// UserVote is a paid mutator transaction binding the contract method 0xbed79609.
//
// Solidity: function userVote(proxy address, accounts address[]) returns(bool)
func (_Dpos *DposTransactor) UserVote(opts *bind.TransactOpts, proxy common.Address, accounts []common.Address) (*types.Transaction, error) {
	return _Dpos.contract.Transact(opts, "userVote", proxy, accounts)
}

// UserVote is a paid mutator transaction binding the contract method 0xbed79609.
//
// Solidity: function userVote(proxy address, accounts address[]) returns(bool)
func (_Dpos *DposSession) UserVote(proxy common.Address, accounts []common.Address) (*types.Transaction, error) {
	return _Dpos.Contract.UserVote(&_Dpos.TransactOpts, proxy, accounts)
}

// UserVote is a paid mutator transaction binding the contract method 0xbed79609.
//
// Solidity: function userVote(proxy address, accounts address[]) returns(bool)
func (_Dpos *DposTransactorSession) UserVote(proxy common.Address, accounts []common.Address) (*types.Transaction, error) {
	return _Dpos.Contract.UserVote(&_Dpos.TransactOpts, proxy, accounts)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xbed9d861.
//
// Solidity: function withdrawStake() returns()
func (_Dpos *DposTransactor) WithdrawStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Dpos.contract.Transact(opts, "withdrawStake")
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xbed9d861.
//
// Solidity: function withdrawStake() returns()
func (_Dpos *DposSession) WithdrawStake() (*types.Transaction, error) {
	return _Dpos.Contract.WithdrawStake(&_Dpos.TransactOpts)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xbed9d861.
//
// Solidity: function withdrawStake() returns()
func (_Dpos *DposTransactorSession) WithdrawStake() (*types.Transaction, error) {
	return _Dpos.Contract.WithdrawStake(&_Dpos.TransactOpts)
}

// DposLogProxyUnvoteIterator is returned from FilterLogProxyUnvote and is used to iterate over the raw logs and unpacked data for LogProxyUnvote events raised by the Dpos contract.
type DposLogProxyUnvoteIterator struct {
	Event *DposLogProxyUnvote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DposLogProxyUnvoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DposLogProxyUnvote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DposLogProxyUnvote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DposLogProxyUnvoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DposLogProxyUnvoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DposLogProxyUnvote represents a LogProxyUnvote event raised by the Dpos contract.
type DposLogProxyUnvote struct {
	Proxy      common.Address
	UnvoteTime *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLogProxyUnvote is a free log retrieval operation binding the contract event 0x46f83f2216482f0d8839e93d2c2616a5fb914d68342883e58d8842b441bd54d4.
//
// Solidity: e LogProxyUnvote(proxy indexed address, unvoteTime uint256)
func (_Dpos *DposFilterer) FilterLogProxyUnvote(opts *bind.FilterOpts, proxy []common.Address) (*DposLogProxyUnvoteIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}

	logs, sub, err := _Dpos.contract.FilterLogs(opts, "LogProxyUnvote", proxyRule)
	if err != nil {
		return nil, err
	}
	return &DposLogProxyUnvoteIterator{contract: _Dpos.contract, event: "LogProxyUnvote", logs: logs, sub: sub}, nil
}

// WatchLogProxyUnvote is a free log subscription operation binding the contract event 0x46f83f2216482f0d8839e93d2c2616a5fb914d68342883e58d8842b441bd54d4.
//
// Solidity: e LogProxyUnvote(proxy indexed address, unvoteTime uint256)
func (_Dpos *DposFilterer) WatchLogProxyUnvote(opts *bind.WatchOpts, sink chan<- *DposLogProxyUnvote, proxy []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}

	logs, sub, err := _Dpos.contract.WatchLogs(opts, "LogProxyUnvote", proxyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DposLogProxyUnvote)
				if err := _Dpos.contract.UnpackLog(event, "LogProxyUnvote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DposLogProxyVoteIterator is returned from FilterLogProxyVote and is used to iterate over the raw logs and unpacked data for LogProxyVote events raised by the Dpos contract.
type DposLogProxyVoteIterator struct {
	Event *DposLogProxyVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DposLogProxyVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DposLogProxyVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DposLogProxyVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DposLogProxyVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DposLogProxyVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DposLogProxyVote represents a LogProxyVote event raised by the Dpos contract.
type DposLogProxyVote struct {
	Proxy     common.Address
	Producers []common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogProxyVote is a free log retrieval operation binding the contract event 0xd46c1e81ba0ed24eccce499e94541a147c4fa3f6346854d76d70f3b6d401f8db.
//
// Solidity: e LogProxyVote(proxy indexed address, producers address[])
func (_Dpos *DposFilterer) FilterLogProxyVote(opts *bind.FilterOpts, proxy []common.Address) (*DposLogProxyVoteIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}

	logs, sub, err := _Dpos.contract.FilterLogs(opts, "LogProxyVote", proxyRule)
	if err != nil {
		return nil, err
	}
	return &DposLogProxyVoteIterator{contract: _Dpos.contract, event: "LogProxyVote", logs: logs, sub: sub}, nil
}

// WatchLogProxyVote is a free log subscription operation binding the contract event 0xd46c1e81ba0ed24eccce499e94541a147c4fa3f6346854d76d70f3b6d401f8db.
//
// Solidity: e LogProxyVote(proxy indexed address, producers address[])
func (_Dpos *DposFilterer) WatchLogProxyVote(opts *bind.WatchOpts, sink chan<- *DposLogProxyVote, proxy []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}

	logs, sub, err := _Dpos.contract.WatchLogs(opts, "LogProxyVote", proxyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DposLogProxyVote)
				if err := _Dpos.contract.UnpackLog(event, "LogProxyVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DposLogUserUnvoteIterator is returned from FilterLogUserUnvote and is used to iterate over the raw logs and unpacked data for LogUserUnvote events raised by the Dpos contract.
type DposLogUserUnvoteIterator struct {
	Event *DposLogUserUnvote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DposLogUserUnvoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DposLogUserUnvote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DposLogUserUnvote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DposLogUserUnvoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DposLogUserUnvoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DposLogUserUnvote represents a LogUserUnvote event raised by the Dpos contract.
type DposLogUserUnvote struct {
	User       common.Address
	UnvoteTime *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLogUserUnvote is a free log retrieval operation binding the contract event 0x2199fcd2dd4d48edeef57d851b15e6ef618dd40ae1104d8e753602502e33ef1c.
//
// Solidity: e LogUserUnvote(user indexed address, unvoteTime uint256)
func (_Dpos *DposFilterer) FilterLogUserUnvote(opts *bind.FilterOpts, user []common.Address) (*DposLogUserUnvoteIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Dpos.contract.FilterLogs(opts, "LogUserUnvote", userRule)
	if err != nil {
		return nil, err
	}
	return &DposLogUserUnvoteIterator{contract: _Dpos.contract, event: "LogUserUnvote", logs: logs, sub: sub}, nil
}

// WatchLogUserUnvote is a free log subscription operation binding the contract event 0x2199fcd2dd4d48edeef57d851b15e6ef618dd40ae1104d8e753602502e33ef1c.
//
// Solidity: e LogUserUnvote(user indexed address, unvoteTime uint256)
func (_Dpos *DposFilterer) WatchLogUserUnvote(opts *bind.WatchOpts, sink chan<- *DposLogUserUnvote, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Dpos.contract.WatchLogs(opts, "LogUserUnvote", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DposLogUserUnvote)
				if err := _Dpos.contract.UnpackLog(event, "LogUserUnvote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DposLogUserVoteIterator is returned from FilterLogUserVote and is used to iterate over the raw logs and unpacked data for LogUserVote events raised by the Dpos contract.
type DposLogUserVoteIterator struct {
	Event *DposLogUserVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DposLogUserVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DposLogUserVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DposLogUserVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DposLogUserVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DposLogUserVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DposLogUserVote represents a LogUserVote event raised by the Dpos contract.
type DposLogUserVote struct {
	Voter     common.Address
	Proxy     common.Address
	Producers []common.Address
	Staked    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogUserVote is a free log retrieval operation binding the contract event 0x5fd2438cc54f76807d5a8071c168927902854cef6c0c22176ded5bbe7174a9fb.
//
// Solidity: e LogUserVote(voter indexed address, proxy indexed address, producers address[], staked uint256)
func (_Dpos *DposFilterer) FilterLogUserVote(opts *bind.FilterOpts, voter []common.Address, proxy []common.Address) (*DposLogUserVoteIterator, error) {

	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}
	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}

	logs, sub, err := _Dpos.contract.FilterLogs(opts, "LogUserVote", voterRule, proxyRule)
	if err != nil {
		return nil, err
	}
	return &DposLogUserVoteIterator{contract: _Dpos.contract, event: "LogUserVote", logs: logs, sub: sub}, nil
}

// WatchLogUserVote is a free log subscription operation binding the contract event 0x5fd2438cc54f76807d5a8071c168927902854cef6c0c22176ded5bbe7174a9fb.
//
// Solidity: e LogUserVote(voter indexed address, proxy indexed address, producers address[], staked uint256)
func (_Dpos *DposFilterer) WatchLogUserVote(opts *bind.WatchOpts, sink chan<- *DposLogUserVote, voter []common.Address, proxy []common.Address) (event.Subscription, error) {

	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}
	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}

	logs, sub, err := _Dpos.contract.WatchLogs(opts, "LogUserVote", voterRule, proxyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DposLogUserVote)
				if err := _Dpos.contract.UnpackLog(event, "LogUserVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DposLogWithdrawStakeIterator is returned from FilterLogWithdrawStake and is used to iterate over the raw logs and unpacked data for LogWithdrawStake events raised by the Dpos contract.
type DposLogWithdrawStakeIterator struct {
	Event *DposLogWithdrawStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DposLogWithdrawStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DposLogWithdrawStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DposLogWithdrawStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DposLogWithdrawStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DposLogWithdrawStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DposLogWithdrawStake represents a LogWithdrawStake event raised by the Dpos contract.
type DposLogWithdrawStake struct {
	User  common.Address
	Stake *big.Int
	Time  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogWithdrawStake is a free log retrieval operation binding the contract event 0xd2a1d21b9fe9c327ee10aa0097ad63335aabc0359e03d12808fc1abd1bf6ffa9.
//
// Solidity: e LogWithdrawStake(user indexed address, stake uint256, time uint256)
func (_Dpos *DposFilterer) FilterLogWithdrawStake(opts *bind.FilterOpts, user []common.Address) (*DposLogWithdrawStakeIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Dpos.contract.FilterLogs(opts, "LogWithdrawStake", userRule)
	if err != nil {
		return nil, err
	}
	return &DposLogWithdrawStakeIterator{contract: _Dpos.contract, event: "LogWithdrawStake", logs: logs, sub: sub}, nil
}

// WatchLogWithdrawStake is a free log subscription operation binding the contract event 0xd2a1d21b9fe9c327ee10aa0097ad63335aabc0359e03d12808fc1abd1bf6ffa9.
//
// Solidity: e LogWithdrawStake(user indexed address, stake uint256, time uint256)
func (_Dpos *DposFilterer) WatchLogWithdrawStake(opts *bind.WatchOpts, sink chan<- *DposLogWithdrawStake, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Dpos.contract.WatchLogs(opts, "LogWithdrawStake", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DposLogWithdrawStake)
				if err := _Dpos.contract.UnpackLog(event, "LogWithdrawStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
